import tkinter as tk
from tkinter import ttk
from tkinter import colorchooser, filedialog, messagebox, image_names
from PIL import Image, ImageDraw


class WhiteboardApp:
    def __init__(self, master):
        self.master = master

        self.master.title(" Whiteboard ")

        # Drawing settings
        self.color = "red"
        self.brush_size = 10
        self.draw_mode = "pen"
        self.st  = ttk.Style()
        self.st.configure("num.TButton", background="white", foreground="red", font=("Times New Roman", 13))

        # Create canvas
        self.canvas = tk.Canvas(master, bg="white", width=2000, height=550)
        self.canvas.pack()

        # Create image for drawing (for saving)
        self.image = Image.new("RGB", (1300,600), "white")
        self.draw = ImageDraw.Draw(self.image)

        # Tracking drawing
        self.old_x = None
        self.old_y = None

        # Bind mouse events
        self.canvas.bind("<B1-Motion>", self.paint)
        self.canvas.bind("<ButtonRelease-1>", self.reset)

        # Create toolbar
        self.create_toolbar()

    def create_toolbar(self):
        # Toolbar frame
        toolbar = tk.Frame(self.master, bg="lightblue", bd=10,relief=tk.RAISED)
        toolbar.pack(fill=tk.X)

        # Color selection button
        color_btn = ttk.Button(toolbar, text="Color",style="num.TButton", width=15, command=self.choose_color)
        color_btn.pack(side=tk.LEFT, padx=5, pady=5)

        # Brush size selection
        self.size_var = tk.StringVar(value="2")
        size_label = ttk.Label(toolbar, text="Brush Size:", width=15,style="num.TButton")
        size_label.pack(side=tk.LEFT, padx=5)
        size_entry = tk.Entry(toolbar, textvariable=self.size_var)
        size_entry.pack(side=tk.LEFT)

        # Tool selection
        tools = [
            ("Pen", "pen"),
            ("Eraser", "eraser"),
        ]

        for name, mode in tools:
            btn = ttk.Button(toolbar, text=name, command=lambda m=mode: self.set_tool(m),width=15,style="num.TButton")
            btn.pack(side=tk.LEFT, padx=5)

        # Save and Clear buttons
        save_btn = ttk.Button(toolbar, text="Save", command=self.save_drawing,width=20,style="num.TButton")
        save_btn.pack(side=tk.LEFT, padx=15)

        clear_btn = ttk.Button(toolbar, text="Clear", command=self.clear_canvas,width=10,style="num.TButton")
        clear_btn.pack(side=tk.LEFT,padx=10)

    def choose_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.color = color

    def set_tool(self, mode):
        self.draw_mode = mode
        self.brush_size = int(self.size_var.get())

    def paint(self, event):
        # Update brush size from entry
        self.brush_size = int(self.size_var.get())

        # Draw on canvas
        if self.old_x and self.old_y:
            if self.draw_mode == "pen":
                self.canvas.config(cursor="pencil")
                self.canvas.create_line(self.old_x, self.old_y, event.x, event.y,
                                        width=self.brush_size, fill=self.color,
                                        capstyle=tk.ROUND, smooth=tk.TRUE)
                self.draw.line([self.old_x, self.old_y, event.x, event.y],
                               fill=self.color, width=self.brush_size)



            elif self.draw_mode == "eraser":
                self.canvas.config(cursor="circle")
                self.canvas.create_rectangle(event.x - self.brush_size, event.y - self.brush_size,
                                             event.x + self.brush_size, event.y + self.brush_size,
                                             fill="white", outline="white")
                self.draw.rectangle([event.x - self.brush_size, event.y - self.brush_size,
                                     event.x + self.brush_size, event.y + self.brush_size],
                                    fill="white")

        # Store current position
        self.old_x = event.x
        self.old_y = event.y

    def reset(self,event):
        self.old_x = None
        self.old_y = None

    def save_drawing(self):
        try:
            filename = filedialog.asksaveasfilename(defaultextension=".png",
                                                    filetypes=[("PNG files", "*.png"),
                                                               ("All files", "*.*")])
            if filename:
                self.image.save(filename)
                messagebox.showinfo("Save", "Drawing saved successfully!")
        except Exception as e:
            messagebox.showerror("Error", f"Could not save drawing: {str(e)}")

    def clear_canvas(self):
        # Clear canvas
        self.canvas.delete("all")

        # Reset image
        self.image = Image.new("RGB", (1300, 590), "white")
        self.draw = ImageDraw.Draw(self.image)


def main():
    root = tk.Tk()

    root.iconbitmap("dw1.ico")
    app = WhiteboardApp(root)
    root.mainloop()



if __name__ == "__main__":
    main()
